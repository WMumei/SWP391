// <auto-generated />
using System;
using JewelryProductionOrder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JewelryProductionOrder.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240726124504_AddNewSeedBaseDesignData")]
    partial class AddNewSeedBaseDesignData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GemstoneMaterialSet", b =>
                {
                    b.Property<int>("GemstonesId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialSetsId")
                        .HasColumnType("int");

                    b.HasKey("GemstonesId", "MaterialSetsId");

                    b.HasIndex("MaterialSetsId");

                    b.ToTable("GemstoneMaterialSet");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.BaseDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseDesigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "\\Images\\Ring.webp",
                            Name = "Bezel Solitarie Engagement Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 2,
                            Image = "\\Images\\Pendant.jpg",
                            Name = "Diamond Reiki Symbol Pendant",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 3,
                            Image = "\\Images\\Necklace.webp",
                            Name = "Smile Necklace",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 4,
                            Image = "\\Images\\Band.webp",
                            Name = "Swirl Diamond Wedding Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The perfect blend of classic and modern, this custom ring has a major wow factor: a 1.5ct oval pink diamond, surrounded by a classic halo of ideally cut Hearts and Arrows diamonds. Set in rose gold, this ring is feminine and romantic.",
                            Image = "\\Images\\7979-image-1612583658_1440x.jpg",
                            Name = "Pink Oval Diamond Halo Engagement Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Our client wanted a symbolic heart necklace for his wife. We added two big diamonds, for the two of them, and seven accent diamonds to represent everyone in their family.",
                            Image = "\\Images\\87a248f457f2f0977135becb26dc43ce-img-1.webp",
                            Name = "Family Heart Pendant",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 7,
                            Description = "This custom engagement ring features a bi-colored blue and purple sapphire, and color enhanced purple diamonds, set into a five petal lotus design with black rhodium detailing. The shank is two intertwining stems, terminating in delicate leaves.",
                            Image = "\\Images\\0e225f328c462698e949123a76f73fd3-img-1_97a7a112-f7bf-4449-bfb5-4e1329e805dc.webp",
                            Name = "Lotus Purple Diamond & Sapphire Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Ribbons of platinum twist around a round brilliant cut blue diamond and swirl around your finger, for a wonderfully unique solitaire design.",
                            Image = "\\Images\\Custom_Blue_Diamond_Swirl_Engagement_Ring_Platinum_Bezel_Set_C109875_1.webp",
                            Name = "Bezel Set Swirl Blue Diamond Engagement Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A petite drop, these earrings feature trillion cut diamonds that point to round bezel set alexandrites, for a bold, geometric design.",
                            Image = "\\Images\\Custom_Trillion_Diamond_Alexandrite_Earrings_White_Gold_C111970-003_1.webp",
                            Name = "Diamond & Alexandrite Stud Earrings",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 10,
                            Description = "This three stone ring makes a statement, with a jawdropping bezel set emerald cut amethyst at its center. A diamond is set on either side in the yellow gold split shank.",
                            Image = "\\Images\\Custom_Yellow_Gold_Bezel_Set_Amethyst_Ring_C109170_2.webp",
                            Name = "Bezel Set Amethyst Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 11,
                            Description = "This is a fun, modern fashion ring with a geometric design that can double as a mother's ring! It's a mother's ring with a twist - definitely not your typical mother's ring style. Stack them in any order, adding more rings to mix and match. This ring can be made in any metal with your choice of gemstones or diamonds.",
                            Image = "\\Images\\FR105-ladies-custom-mothers-ring-stackable-with-sapphire-and-emerald-yellow-gold_e24f839f-d6fd-4304-bd59-c17e12e871b3.webp",
                            Name = "Stackable fashion ring or mother's ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Looking for longer pearl earrings and finding a bunch of studs and short drops? You're not alone! Here's a pair of distinctive Tahitian pearl earring drops with an elegant, organic design.",
                            Image = "\\Images\\ER101-tahitian-pearls-trillion-sapphires-diamond-drop-earrings_09b1a9b1-0d3d-421c-af9a-029ca1ecb008.webp",
                            Name = "Tahitian Pearl and Sapphire Earrings",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 13,
                            Description = "With custom, you get to include multiple elements that mean something to you. This ring guard features an anchor and wings, set with a diamond and a ruby for a look that gleams with meaning.",
                            Image = "\\Images\\8067-image-1580068996_e1f67302-b0d6-43d9-9399-472e090e120d.webp",
                            Name = "Anchor and Wings Ring Guard",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 14,
                            Description = "This ring is a bold band with black diamonds that perfectly complement the white diamonds. A simple statement on its own, this ring is a unisex design.",
                            Image = "\\Images\\BAND103-Black-and-white-diamond-band_64789a11-0a58-48a4-90a9-46b2f10e850c.webp",
                            Name = "White and Black Diamond Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Branches of high polished yellow gold weave and overlap. Matte finished leaves are accented with milgrain, creating this organic wedding band.",
                            Image = "\\Images\\Custom_Yellow_Gold_Leaf_Woven_Wedding_Band_C108630_1_3540f942-ad41-4aa7-bc6e-1e1355167da8.webp",
                            Name = "Woven Leaf Wedding Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Lovely and dainty, these scalloped white gold wedding bands have tapered round diamonds set all the way around.",
                            Image = "\\Images\\Custom_Scalloped_Dainty_Eternity_Diamond_Wedding_Band_C115153_1_fb567c30-10ac-479f-bf34-600ae9d4af9a.webp",
                            Name = "Dainty Scalloped Diamond Eternity Wedding Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 17,
                            Description = "This delicate constellation inspired pearl and diamond chevron-style band was created to flank either side of a client's ring.",
                            Image = "\\Images\\3d045b12c6cc607bfd55bb60c91fe076-img-1_22ebbc37-1a14-4122-a6ca-e661d952b838.webp",
                            Name = "Diamond and Pearl Chevron Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 18,
                            Description = "This custom ring features scattered flush set Hearts and Arrows diamonds, which are ideally cut to maximize sparkle. It's made out of our special heat treated platinum, which is a client favorite due to its extreme durability and natural white appearance.",
                            Image = "\\Images\\63874425ac7e06ac9bd4167b6d2cffb5-img-1_38bb76f1-aa9d-4a74-9ac6-d2a401feae4c.webp",
                            Name = "Platinum Etoile Style Diamond Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Perfectly matched princess cut diamonds fill out the channel setting flawlessly, framed by double milgrain details and scrolling filigree cutouts on the side. All topped off with an adorable yellow side diamond!",
                            Image = "\\Images\\BAND110-Channel-Set-Band-Yellow-Side-Diamond_8b9e4895-270f-4d13-9287-287258fb4ff3.webp",
                            Name = "Channel Set Band with Yellow Side Diamond",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Simple and elegant, this diamond band is timeless. Customizable with whatever color gold or stones you like, wear this band with your engagement ring or as a stackable ring that goes with everything!",
                            Image = "\\Images\\BAND102-rose_de568f71-762f-4de6-9d2d-93318ad72bbb.webp",
                            Name = "Rose gold diamond eternity band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 21,
                            Description = "A swish of diamonds creates an open, asymmetrical chevron shape in yellow gold for this custom wedding band.",
                            Image = "\\Images\\Custom_Yellow_Gold_Diamond_Open_Chevron_Wedding_Band_C113156_2.webp",
                            Name = "Open Chevron Diamond Wedding Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 22,
                            Description = "A pear shaped diamond and sapphire come together at the center of this stunning Toi Et Moi ring. The band is open twists of yellow gold that shines beneath the center stones.",
                            Image = "\\Images\\Custom_Toi_Et_Moi_Sapphire___Diamond_Twist_Ring_C111202_1_2026636c-3f7e-4b2c-815a-83f9ed37e499.webp",
                            Name = "Pear Shaped Sapphire & Diamond Twist Toi Et Moi Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 23,
                            Description = "This 14kt yellow gold family ring features colored diamond birthstones set in a fun and unique \"coil\" design that wraps around the finger. Make it yours by setting the birthstones of everyone in the family, or set it with clear white diamonds for a beautiful statement ring.",
                            Image = "\\Images\\89f7ed814c7ccd1af32d09d63cf03150-img-1_4ffe6193-4311-47f5-b54b-49afcb602d1d.webp",
                            Name = "Coiled Mother's Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 24,
                            Description = "This custom geometric 14k yellow gold engagement ring features a bezel set diamond, surrounded by a hexagonal onyx, set on-point.",
                            Image = "\\Images\\da795683c5c20a96f7243c2d53b55bce-img-1_75211d5b-9e26-4605-865b-abd2a76436f8.webp",
                            Name = "Onyx and Diamond Hexagon Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 25,
                            Description = "These custom white gold sparkling earrings feature Hearts and Arrows diamonds, pave set into crescent moon and star studs.",
                            Image = "\\Images\\1cc052e03723f9d206b59aa9ed7548d1-img-1_d7de0c8b-ded6-48e7-8626-84ea7255c192.webp",
                            Name = "Celestial Star and Moon Stud Earrings",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 26,
                            Description = "This captivating men's ring features a yellow gold fish against white gold mountains, bezel set with a garnet and a moonstone.",
                            Image = "\\Images\\Custom_Garnet___Moonstone_Mountain_Fish_Ring_C114994_1_dc85e0d6-ab1d-4dac-8d54-16daf7d79a64.webp",
                            Name = "Garnet & Moonstone Mountain Fish Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 27,
                            Description = "We hand engraved a pattern on this yellow gold band based on our client's drawing: an ocean nightscape with rolling waves and twinkling stars.",
                            Image = "\\Images\\adc394e3ef66788c3ee5f53eb4727713-img-1_b063ac0b-af0c-4215-9969-5469ecd5e82c.webp",
                            Name = "Sea and Stars Ocean Nightscape Band",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Three round brilliant cut diamonds, all set in platinum with six prongs, make light glitter and dance.",
                            Image = "\\Images\\Custom_Three_Stone_Diamond_Engagement_Ring_Platinum_C106809_1.webp",
                            Name = "Platinum Three Stone Diamond Engagement Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 29,
                            Description = "A 1.80ct trillion cut teal sapphire steals the show in this contemporary bypass wave ring with diamond accents.",
                            Image = "\\Images\\14493-image-1609295068_e14c0264-9533-429a-ac6c-6fafc3f4a184.webp",
                            Name = "Modern Teal Sapphire Trillion Engagement Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Graduated pink, purple, and blue sapphire wrap around star sapphires, accented with pearls and diamonds to create a spectacular, one of a kind pendant. The backside features beautiful waves and swirls in rose gold.",
                            Image = "\\Images\\Custom_Graduated_Sapphire_Pearl___Diamond_Pendant_C113044_1_30550cf7-b8c1-4255-9f08-807cd25da78b.webp",
                            Name = "Graduated Star Sapphire Pendant",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 31,
                            Description = "A stunning emerald cut Brazilian alexandrite weighing 1.00ct, takes center stage in this one of a kind geometric pendant, accented with a trillion cut white diamond and three round teal diamonds.",
                            Image = "\\Images\\9371ce3f3abde2b5cb55d46361fda4f5-img-1.webp",
                            Name = "Geometric Alexandrite Necklace",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 32,
                            Description = "A classic style with a bold look, this three stone platinum ring features a princess cut Mozambique garnet  between two princess cut diamonds, all tied together with a euroshank!",
                            Image = "\\Images\\bbe2560e1ec98dd6962daab21429d47d-img-1_7b2fb8a6-6d85-4197-90c6-d91558c68280.webp",
                            Name = "Garnet Platinum Ring",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 33,
                            Description = "These beautiful earrings are part of a set with a matching pendant! Made using the client's stones, we designed this unique, freeform set in white gold. These earrings can be set with any gemstones or diamonds.",
                            Image = "\\Images\\ER104-Ruby-and-diamond-water-drop-earrings_00318228-da35-4d89-b817-f0d74c9f8bb9.webp",
                            Name = "Ruby and diamond water drop earrings",
                            Type = "Company"
                        },
                        new
                        {
                            Id = 34,
                            Description = "This 14k white gold bypass swirl ring features a round blue star sapphire and heirloom diamonds.",
                            Image = "\\Images\\b4d5613ae690104bf388af17964be9a2-img-1_e13c8c38-1b59-42ae-a4a5-12ade79002cc.webp",
                            Name = "Star Sapphire Swirl Ring",
                            Type = "Company"
                        });
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Delivery", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SalesStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<int>("WarrantyCardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId", "SalesStaffId", "JewelryId", "WarrantyCardId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("SalesStaffId");

                    b.HasIndex("WarrantyCardId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Gemstone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Carat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gemstones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Carat = 3m,
                            Clarity = "VS1",
                            Color = "White",
                            Cut = "Round",
                            Name = "Diamond",
                            Price = 2000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Carat = 1.5m,
                            Clarity = "VVS1",
                            Color = "Red",
                            Cut = "Oval",
                            Name = "Ruby",
                            Price = 1500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            Carat = 1.8m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Princess",
                            Name = "Sapphire",
                            Price = 1800m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            Carat = 2m,
                            Clarity = "VS2",
                            Color = "White",
                            Cut = "Emerald",
                            Name = "Diamond",
                            Price = 1800m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            Carat = 1m,
                            Clarity = "VVS2",
                            Color = "White",
                            Cut = "Marquise",
                            Name = "Diamond",
                            Price = 1000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            Carat = 2.5m,
                            Clarity = "VS1",
                            Color = "Green",
                            Cut = "Cushion",
                            Name = "Emerald",
                            Price = 2500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 7,
                            Carat = 1.2m,
                            Clarity = "SI1",
                            Color = "Purple",
                            Cut = "Heart",
                            Name = "Amethyst",
                            Price = 600m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 8,
                            Carat = 1.8m,
                            Clarity = "VS1",
                            Color = "Yellow",
                            Cut = "Oval",
                            Name = "Topaz",
                            Price = 800m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 9,
                            Carat = 1.9m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Marquise",
                            Name = "Aquamarine",
                            Price = 1100m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 10,
                            Carat = 1.4m,
                            Clarity = "VS1",
                            Color = "Red",
                            Cut = "Round",
                            Name = "Garnet",
                            Price = 700m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 11,
                            Carat = 1.5m,
                            Clarity = "SI1",
                            Color = "Green",
                            Cut = "Princess",
                            Name = "Peridot",
                            Price = 500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 12,
                            Carat = 1.3m,
                            Clarity = "VS2",
                            Color = "Yellow",
                            Cut = "Emerald",
                            Name = "Citrine",
                            Price = 400m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 13,
                            Carat = 1.7m,
                            Clarity = "VS1",
                            Color = "Pink",
                            Cut = "Cushion",
                            Name = "Morganite",
                            Price = 1200m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 14,
                            Carat = 1.6m,
                            Clarity = "VS2",
                            Color = "Multi",
                            Cut = "Heart",
                            Name = "Opal",
                            Price = 900m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 15,
                            Carat = 1.3m,
                            Clarity = "VS1",
                            Color = "Red",
                            Cut = "Oval",
                            Name = "Spinel",
                            Price = 950m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 16,
                            Carat = 2m,
                            Clarity = "VS2",
                            Color = "Green",
                            Cut = "Round",
                            Name = "Tourmaline",
                            Price = 1000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 17,
                            Carat = 1.8m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Marquise",
                            Name = "Tanzanite",
                            Price = 1300m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 18,
                            Carat = 1.2m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Princess",
                            Name = "Zircon",
                            Price = 450m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 19,
                            Carat = 1.5m,
                            Clarity = "SI1",
                            Color = "Green",
                            Cut = "Emerald",
                            Name = "Jade",
                            Price = 700m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 20,
                            Carat = 1.4m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Cushion",
                            Name = "Lapis",
                            Price = 550m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 21,
                            Carat = 1.3m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Heart",
                            Name = "Turquoise",
                            Price = 600m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 22,
                            Carat = 1.1m,
                            Clarity = "VS1",
                            Color = "White",
                            Cut = "Oval",
                            Name = "Moonstone",
                            Price = 400m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 23,
                            Carat = 1.2m,
                            Clarity = "SI1",
                            Color = "Black",
                            Cut = "Round",
                            Name = "Onyx",
                            Price = 350m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 24,
                            Carat = 1.5m,
                            Clarity = "VS2",
                            Color = "Green",
                            Cut = "Princess",
                            Name = "Alexandrite",
                            Price = 3000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 25,
                            Carat = 1.0m,
                            Clarity = "VS1",
                            Color = "Orange",
                            Cut = "Emerald",
                            Name = "Carnelian",
                            Price = 200m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 26,
                            Carat = 1.7m,
                            Clarity = "VS2",
                            Color = "Pink",
                            Cut = "Cushion",
                            Name = "Kunzite",
                            Price = 850m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 27,
                            Carat = 1.3m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Heart",
                            Name = "Larimar",
                            Price = 400m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 28,
                            Carat = 1.2m,
                            Clarity = "SI1",
                            Color = "Green",
                            Cut = "Oval",
                            Name = "Malachite",
                            Price = 300m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 29,
                            Carat = 1.1m,
                            Clarity = "VS2",
                            Color = "Black",
                            Cut = "Round",
                            Name = "Obsidian",
                            Price = 200m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 30,
                            Carat = 1.0m,
                            Clarity = "VS1",
                            Color = "White",
                            Cut = "Round",
                            Name = "Pearl",
                            Price = 100m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 31,
                            Carat = 2m,
                            Clarity = "VS2",
                            Color = "Green",
                            Cut = "Marquise",
                            Name = "Beryl",
                            Price = 1300m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 32,
                            Carat = 1.3m,
                            Clarity = "SI1",
                            Color = "Green",
                            Cut = "Princess",
                            Name = "Bloodstone",
                            Price = 500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 33,
                            Carat = 1.1m,
                            Clarity = "VS1",
                            Color = "Red",
                            Cut = "Emerald",
                            Name = "Coral",
                            Price = 400m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 34,
                            Carat = 1.0m,
                            Clarity = "VS2",
                            Color = "Black",
                            Cut = "Cushion",
                            Name = "Hematite",
                            Price = 300m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 35,
                            Carat = 1.4m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Heart",
                            Name = "Iolite",
                            Price = 700m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 36,
                            Carat = 1.0m,
                            Clarity = "SI1",
                            Color = "Red",
                            Cut = "Oval",
                            Name = "Jasper",
                            Price = 200m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 37,
                            Carat = 1.5m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Round",
                            Name = "Kyanite",
                            Price = 600m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 38,
                            Carat = 1.2m,
                            Clarity = "VS1",
                            Color = "Grey",
                            Cut = "Marquise",
                            Name = "Labradorite",
                            Price = 500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 39,
                            Carat = 1.1m,
                            Clarity = "VS2",
                            Color = "Pink",
                            Cut = "Princess",
                            Name = "Rhodochrosite",
                            Price = 450m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 40,
                            Carat = 1.2m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Emerald",
                            Name = "Sodalite",
                            Price = 300m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 41,
                            Carat = 1.3m,
                            Clarity = "SI1",
                            Color = "Purple",
                            Cut = "Cushion",
                            Name = "Sugilite",
                            Price = 350m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 42,
                            Carat = 1.4m,
                            Clarity = "VS2",
                            Color = "Orange",
                            Cut = "Heart",
                            Name = "Sunstone",
                            Price = 400m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 43,
                            Carat = 1.1m,
                            Clarity = "VS1",
                            Color = "Brown",
                            Cut = "Oval",
                            Name = "TigersEye",
                            Price = 250m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 44,
                            Carat = 1.2m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Round",
                            Name = "Turquoise",
                            Price = 500m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 45,
                            Carat = 1.0m,
                            Clarity = "SI1",
                            Color = "Green",
                            Cut = "Marquise",
                            Name = "Unakite",
                            Price = 200m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 46,
                            Carat = 1.5m,
                            Clarity = "VS1",
                            Color = "Green",
                            Cut = "Princess",
                            Name = "Variscite",
                            Price = 600m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 47,
                            Carat = 1.6m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Emerald",
                            Name = "Zircon",
                            Price = 700m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 48,
                            Carat = 1.7m,
                            Clarity = "VS1",
                            Color = "Purple",
                            Cut = "Cushion",
                            Name = "Ametrine",
                            Price = 1000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 49,
                            Carat = 1.8m,
                            Clarity = "VS2",
                            Color = "Blue",
                            Cut = "Heart",
                            Name = "Benitoite",
                            Price = 3000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 50,
                            Carat = 1.2m,
                            Clarity = "VS1",
                            Color = "Blue",
                            Cut = "Oval",
                            Name = "Chalcedony",
                            Price = 450m,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Jewelry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseDesignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaterialSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductionRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SalesStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseDesignId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MaterialSetId");

                    b.HasIndex("ProductionRequestId");

                    b.HasIndex("ProductionStaffId");

                    b.HasIndex("SalesStaffId");

                    b.ToTable("Jewelries");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.JewelryDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesignFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductionStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DesignStaffId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("ProductionStaffId");

                    b.ToTable("JewelryDesigns");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Purity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "White",
                            Price = 100m,
                            Purity = "14K",
                            Type = "Gold"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Rose",
                            Price = 50m,
                            Purity = "10K",
                            Type = "Gold"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Yellow",
                            Price = 80m,
                            Purity = "18K",
                            Type = "Gold"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Green",
                            Price = 90m,
                            Purity = "14K",
                            Type = "Gold"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Silver",
                            Price = 60m,
                            Purity = "925",
                            Type = "Silver"
                        },
                        new
                        {
                            Id = 6,
                            Color = "Silver",
                            Price = 70m,
                            Purity = "999",
                            Type = "Silver"
                        },
                        new
                        {
                            Id = 7,
                            Color = "White",
                            Price = 120m,
                            Purity = "950",
                            Type = "Platinum"
                        },
                        new
                        {
                            Id = 8,
                            Color = "Red",
                            Price = 30m,
                            Purity = "99.9%",
                            Type = "Copper"
                        },
                        new
                        {
                            Id = 9,
                            Color = "Golden",
                            Price = 40m,
                            Purity = "60%",
                            Type = "Brass"
                        },
                        new
                        {
                            Id = 10,
                            Color = "Grey",
                            Price = 50m,
                            Purity = "99.9%",
                            Type = "Titanium"
                        },
                        new
                        {
                            Id = 11,
                            Color = "Silver",
                            Price = 45m,
                            Purity = "304",
                            Type = "Steel"
                        },
                        new
                        {
                            Id = 12,
                            Color = "Grey",
                            Price = 20m,
                            Purity = "99.9%",
                            Type = "Zinc"
                        },
                        new
                        {
                            Id = 13,
                            Color = "White",
                            Price = 150m,
                            Purity = "99.9%",
                            Type = "Rhodium"
                        },
                        new
                        {
                            Id = 14,
                            Color = "White",
                            Price = 100m,
                            Purity = "95%",
                            Type = "Palladium"
                        },
                        new
                        {
                            Id = 15,
                            Color = "Grey",
                            Price = 180m,
                            Purity = "99.9%",
                            Type = "Iridium"
                        });
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.MaterialSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MaterialSets");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.MaterialSetMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MaterialId", "MaterialSetId");

                    b.HasIndex("MaterialSetId");

                    b.ToTable("MaterialSetsMaterials");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SalesStaffId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ProductionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesignStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SalesStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DesignStaffId");

                    b.HasIndex("ProductionStaffId");

                    b.HasIndex("SalesStaffId");

                    b.ToTable("ProductionRequests");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ProductionRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseDesignId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseDesignId");

                    b.HasIndex("ProductionRequestId");

                    b.ToTable("ProductionRequestDetails");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.QuotationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<decimal>("LaborPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaterialSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SalesStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MaterialSetId");

                    b.HasIndex("SalesStaffId");

                    b.ToTable("QuotationRequests");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseDesignId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BaseDesignId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.WarrantyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("JewelryId")
                        .HasColumnType("int");

                    b.Property<string>("SalesStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JewelryId")
                        .IsUnique();

                    b.HasIndex("SalesStaffId");

                    b.ToTable("WarrantyCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("GemstoneMaterialSet", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.Gemstone", null)
                        .WithMany()
                        .HasForeignKey("GemstonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.MaterialSet", null)
                        .WithMany()
                        .HasForeignKey("MaterialSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Delivery", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.Jewelry", "Jewelry")
                        .WithMany()
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.WarrantyCard", "WarrantyCard")
                        .WithMany()
                        .HasForeignKey("WarrantyCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Jewelry");

                    b.Navigation("SalesStaff");

                    b.Navigation("WarrantyCard");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Jewelry", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.BaseDesign", "BaseDesign")
                        .WithMany()
                        .HasForeignKey("BaseDesignId");

                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.MaterialSet", "MaterialSet")
                        .WithMany("Jewelries")
                        .HasForeignKey("MaterialSetId");

                    b.HasOne("JewelryProductionOrder.Models.ProductionRequest", "ProductionRequest")
                        .WithMany("Jewelries")
                        .HasForeignKey("ProductionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "ProductionStaff")
                        .WithMany()
                        .HasForeignKey("ProductionStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseDesign");

                    b.Navigation("Customer");

                    b.Navigation("MaterialSet");

                    b.Navigation("ProductionRequest");

                    b.Navigation("ProductionStaff");

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.JewelryDesign", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.User", "DesignStaff")
                        .WithMany()
                        .HasForeignKey("DesignStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.Jewelry", "Jewelry")
                        .WithMany("JewelryDesigns")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "ProductionStaff")
                        .WithMany()
                        .HasForeignKey("ProductionStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DesignStaff");

                    b.Navigation("Jewelry");

                    b.Navigation("ProductionStaff");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.MaterialSetMaterial", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.Material", "Material")
                        .WithMany("MaterialSetMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.MaterialSet", "MaterialSet")
                        .WithMany("MaterialSetMaterials")
                        .HasForeignKey("MaterialSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("MaterialSet");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Post", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ProductionRequest", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.User", "DesignStaff")
                        .WithMany()
                        .HasForeignKey("DesignStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.User", "ProductionStaff")
                        .WithMany()
                        .HasForeignKey("ProductionStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DesignStaff");

                    b.Navigation("ProductionStaff");

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ProductionRequestDetail", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.BaseDesign", "BaseDesign")
                        .WithMany()
                        .HasForeignKey("BaseDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.ProductionRequest", "ProductionRequest")
                        .WithMany("ProductionRequestDetails")
                        .HasForeignKey("ProductionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDesign");

                    b.Navigation("ProductionRequest");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.QuotationRequest", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("JewelryProductionOrder.Models.Jewelry", "Jewelry")
                        .WithMany("QuotationRequests")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JewelryProductionOrder.Models.MaterialSet", "MaterialSet")
                        .WithMany()
                        .HasForeignKey("MaterialSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Jewelry");

                    b.Navigation("Manager");

                    b.Navigation("MaterialSet");

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ShoppingCart", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.BaseDesign", "BaseDesign")
                        .WithMany()
                        .HasForeignKey("BaseDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDesign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.WarrantyCard", b =>
                {
                    b.HasOne("JewelryProductionOrder.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.Jewelry", "Jewelry")
                        .WithOne("WarrantyCard")
                        .HasForeignKey("JewelryProductionOrder.Models.WarrantyCard", "JewelryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProductionOrder.Models.User", "SalesStaff")
                        .WithMany()
                        .HasForeignKey("SalesStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Jewelry");

                    b.Navigation("SalesStaff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Jewelry", b =>
                {
                    b.Navigation("JewelryDesigns");

                    b.Navigation("QuotationRequests");

                    b.Navigation("WarrantyCard");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.Material", b =>
                {
                    b.Navigation("MaterialSetMaterials");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.MaterialSet", b =>
                {
                    b.Navigation("Jewelries");

                    b.Navigation("MaterialSetMaterials");
                });

            modelBuilder.Entity("JewelryProductionOrder.Models.ProductionRequest", b =>
                {
                    b.Navigation("Jewelries");

                    b.Navigation("ProductionRequestDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
